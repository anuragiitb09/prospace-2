# -*- coding: utf-8 -*-
"""prospace.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-uxzwau7SfyMMxDsQsQ-j8vjFhXpIorK
"""

import pandas as pd
import numpy as np

class TradingStrategy:
    def __init__(self, build_threshold=0.6, liquidate_threshold=0.2):
        self.build_threshold = build_threshold
        self.liquidate_threshold = liquidate_threshold

    def apply_strategy(self, data):
        position = 0
        positions = []

        for i in range(len(data)):
            alpha = data.loc[i, 'alpha']
            if position == 0:
                if alpha > self.build_threshold:
                    position = 1  # Buy 1 unit
                elif alpha < -self.build_threshold:
                    position = -1  # Short 1 unit
            elif position == 1:
                if alpha < self.liquidate_threshold:
                    position = 0  # Liquidate position
            elif position == -1:
                if alpha > -self.liquidate_threshold:
                    position = 0  # Liquidate position
            positions.append(position)

        data['position'] = positions
        return data

class BacktestingEngine:
    def __init__(self, data):
        self.data = data

    def calculate_pnl(self):
        pnl = []
        for i in range(1, len(self.data)):
            position = self.data.loc[i-1, 'position']
            price_change = self.data.loc[i, 'price'] - self.data.loc[i-1, 'price']
            pnl.append(position * price_change)

        self.data['pnl'] = [0] + pnl
        total_pnl = sum(pnl)
        return total_pnl

    def optimize_thresholds(self, build_thresholds, liquidate_thresholds):
        best_build_threshold = None
        best_liquidate_threshold = None
        max_pnl = -np.inf

        for bt in build_thresholds:
            for lt in liquidate_thresholds:
                strategy = TradingStrategy(build_threshold=bt, liquidate_threshold=lt)
                test_data = strategy.apply_strategy(self.data.copy())
                engine = BacktestingEngine(test_data)
                pnl = engine.calculate_pnl()
                if pnl > max_pnl:
                    max_pnl = pnl
                    best_build_threshold = bt
                    best_liquidate_threshold = lt

        return best_build_threshold, best_liquidate_threshold, max_pnl

# Load the dataset
data = pd.read_csv('/content/ProSpace - Sheet1.csv')

# Task 1: Apply Static Thresholds Trading Strategy
strategy = TradingStrategy(build_threshold=0.6, liquidate_threshold=0.2)
data_with_positions = strategy.apply_strategy(data)

# Save the data with positions to a new CSV file
data_with_positions.to_csv('data_with_positions.csv', index=False)

# Task 2: Backtesting Engine to calculate P&L
engine = BacktestingEngine(data_with_positions)
total_pnl = engine.calculate_pnl()
print(f"Total PnL: {total_pnl}")

# Task 3: Optimizing Thresholds
build_thresholds = np.arange(0.1, 1.0, 0.1)
liquidate_thresholds = np.arange(0.1, 1.0, 0.1)
best_bt, best_lt, best_pnl = engine.optimize_thresholds(build_thresholds, liquidate_thresholds)
print(f"Optimal Build Threshold: {best_bt}, Optimal Liquidate Threshold: {best_lt}, Max PnL: {best_pnl}")